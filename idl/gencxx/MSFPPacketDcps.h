//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: MSFPPacketDcps.h
//  Source: gencxx/MSFPPacketDcps.idl
//  Generated: Thu Jul  7 23:28:06 2016
//  OpenSplice V6.4.140407OSS
//  
//******************************************************************
#ifndef _MSFPPACKETDCPS_H_
#define _MSFPPACKETDCPS_H_

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"
#include "dds_dcps.h"
#include "MSFPPacket.h"


namespace micros_swarm_framework
{

   class MSFPPacketTypeSupportInterface;

   typedef MSFPPacketTypeSupportInterface * MSFPPacketTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < MSFPPacketTypeSupportInterface> MSFPPacketTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < MSFPPacketTypeSupportInterface> MSFPPacketTypeSupportInterface_out;


   class MSFPPacketDataWriter;

   typedef MSFPPacketDataWriter * MSFPPacketDataWriter_ptr;
   typedef DDS_DCPSInterface_var < MSFPPacketDataWriter> MSFPPacketDataWriter_var;
   typedef DDS_DCPSInterface_out < MSFPPacketDataWriter> MSFPPacketDataWriter_out;


   class MSFPPacketDataReader;

   typedef MSFPPacketDataReader * MSFPPacketDataReader_ptr;
   typedef DDS_DCPSInterface_var < MSFPPacketDataReader> MSFPPacketDataReader_var;
   typedef DDS_DCPSInterface_out < MSFPPacketDataReader> MSFPPacketDataReader_out;


   class MSFPPacketDataReaderView;

   typedef MSFPPacketDataReaderView * MSFPPacketDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < MSFPPacketDataReaderView> MSFPPacketDataReaderView_var;
   typedef DDS_DCPSInterface_out < MSFPPacketDataReaderView> MSFPPacketDataReaderView_out;

   struct MSFPPacketSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < MSFPPacket, struct MSFPPacketSeq_uniq_> MSFPPacketSeq;
   typedef DDS_DCPSSequence_var < MSFPPacketSeq> MSFPPacketSeq_var;
   typedef DDS_DCPSSequence_out < MSFPPacketSeq> MSFPPacketSeq_out;
   class MSFPPacketTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef MSFPPacketTypeSupportInterface_ptr _ptr_type;
      typedef MSFPPacketTypeSupportInterface_var _var_type;

      static MSFPPacketTypeSupportInterface_ptr _duplicate (MSFPPacketTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static MSFPPacketTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static MSFPPacketTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static MSFPPacketTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      MSFPPacketTypeSupportInterface_ptr _this () { return this; }


   protected:
      MSFPPacketTypeSupportInterface () {};
      ~MSFPPacketTypeSupportInterface () {};
   private:
      MSFPPacketTypeSupportInterface (const MSFPPacketTypeSupportInterface &);
      MSFPPacketTypeSupportInterface & operator = (const MSFPPacketTypeSupportInterface &);
   };

   class MSFPPacketDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef MSFPPacketDataWriter_ptr _ptr_type;
      typedef MSFPPacketDataWriter_var _var_type;

      static MSFPPacketDataWriter_ptr _duplicate (MSFPPacketDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static MSFPPacketDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static MSFPPacketDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static MSFPPacketDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      MSFPPacketDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const MSFPPacket& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const MSFPPacket& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const MSFPPacket& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const MSFPPacket& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const MSFPPacket& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const MSFPPacket& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const MSFPPacket& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const MSFPPacket& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const MSFPPacket& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const MSFPPacket& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (MSFPPacket& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const MSFPPacket& instance_data) = 0;

   protected:
      MSFPPacketDataWriter () {};
      ~MSFPPacketDataWriter () {};
   private:
      MSFPPacketDataWriter (const MSFPPacketDataWriter &);
      MSFPPacketDataWriter & operator = (const MSFPPacketDataWriter &);
   };

   class MSFPPacketDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef MSFPPacketDataReader_ptr _ptr_type;
      typedef MSFPPacketDataReader_var _var_type;

      static MSFPPacketDataReader_ptr _duplicate (MSFPPacketDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static MSFPPacketDataReader_ptr _narrow (DDS::Object_ptr obj);
      static MSFPPacketDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static MSFPPacketDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      MSFPPacketDataReader_ptr _this () { return this; }

      virtual DDS::Long read (MSFPPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (MSFPPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (MSFPPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (MSFPPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (MSFPPacket& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (MSFPPacket& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (MSFPPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (MSFPPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (MSFPPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (MSFPPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (MSFPPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (MSFPPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (MSFPPacketSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (MSFPPacket& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const MSFPPacket& instance) = 0;

   protected:
      MSFPPacketDataReader () {};
      ~MSFPPacketDataReader () {};
   private:
      MSFPPacketDataReader (const MSFPPacketDataReader &);
      MSFPPacketDataReader & operator = (const MSFPPacketDataReader &);
   };

   class MSFPPacketDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef MSFPPacketDataReaderView_ptr _ptr_type;
      typedef MSFPPacketDataReaderView_var _var_type;

      static MSFPPacketDataReaderView_ptr _duplicate (MSFPPacketDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static MSFPPacketDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static MSFPPacketDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static MSFPPacketDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      MSFPPacketDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (MSFPPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (MSFPPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (MSFPPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (MSFPPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (MSFPPacket& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (MSFPPacket& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (MSFPPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (MSFPPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (MSFPPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (MSFPPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (MSFPPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (MSFPPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (MSFPPacketSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (MSFPPacket& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const MSFPPacket& instance) = 0;

   protected:
      MSFPPacketDataReaderView () {};
      ~MSFPPacketDataReaderView () {};
   private:
      MSFPPacketDataReaderView (const MSFPPacketDataReaderView &);
      MSFPPacketDataReaderView & operator = (const MSFPPacketDataReaderView &);
   };

}




#endif 
