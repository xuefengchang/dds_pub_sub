//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: dataDcps.cpp
//  Source: gencxx/dataDcps.idl
//  Generated: Wed Jun  8 21:43:46 2016
//  OpenSplice V6.4.140407OSS
//  
//******************************************************************

#include "dataDcps.h"

#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < NetworkPartitionsData::ChatMessage, struct ChatMessageSeq_uniq_>;
#endif

const char * NetworkPartitionsData::ChatMessageTypeSupportInterface::_local_id = "IDL:NetworkPartitionsData/ChatMessageTypeSupportInterface:1.0";

NetworkPartitionsData::ChatMessageTypeSupportInterface_ptr NetworkPartitionsData::ChatMessageTypeSupportInterface::_duplicate (NetworkPartitionsData::ChatMessageTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean NetworkPartitionsData::ChatMessageTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, NetworkPartitionsData::ChatMessageTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

NetworkPartitionsData::ChatMessageTypeSupportInterface_ptr NetworkPartitionsData::ChatMessageTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   NetworkPartitionsData::ChatMessageTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (NetworkPartitionsData::ChatMessageTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < NetworkPartitionsData::ChatMessageTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

NetworkPartitionsData::ChatMessageTypeSupportInterface_ptr NetworkPartitionsData::ChatMessageTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   NetworkPartitionsData::ChatMessageTypeSupportInterface_ptr result;
   result = dynamic_cast < NetworkPartitionsData::ChatMessageTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * NetworkPartitionsData::ChatMessageDataWriter::_local_id = "IDL:NetworkPartitionsData/ChatMessageDataWriter:1.0";

NetworkPartitionsData::ChatMessageDataWriter_ptr NetworkPartitionsData::ChatMessageDataWriter::_duplicate (NetworkPartitionsData::ChatMessageDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean NetworkPartitionsData::ChatMessageDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, NetworkPartitionsData::ChatMessageDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

NetworkPartitionsData::ChatMessageDataWriter_ptr NetworkPartitionsData::ChatMessageDataWriter::_narrow (DDS::Object_ptr p)
{
   NetworkPartitionsData::ChatMessageDataWriter_ptr result = NULL;
   if (p && p->_is_a (NetworkPartitionsData::ChatMessageDataWriter::_local_id))
   {
      result = dynamic_cast < NetworkPartitionsData::ChatMessageDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

NetworkPartitionsData::ChatMessageDataWriter_ptr NetworkPartitionsData::ChatMessageDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   NetworkPartitionsData::ChatMessageDataWriter_ptr result;
   result = dynamic_cast < NetworkPartitionsData::ChatMessageDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * NetworkPartitionsData::ChatMessageDataReader::_local_id = "IDL:NetworkPartitionsData/ChatMessageDataReader:1.0";

NetworkPartitionsData::ChatMessageDataReader_ptr NetworkPartitionsData::ChatMessageDataReader::_duplicate (NetworkPartitionsData::ChatMessageDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean NetworkPartitionsData::ChatMessageDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, NetworkPartitionsData::ChatMessageDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

NetworkPartitionsData::ChatMessageDataReader_ptr NetworkPartitionsData::ChatMessageDataReader::_narrow (DDS::Object_ptr p)
{
   NetworkPartitionsData::ChatMessageDataReader_ptr result = NULL;
   if (p && p->_is_a (NetworkPartitionsData::ChatMessageDataReader::_local_id))
   {
      result = dynamic_cast < NetworkPartitionsData::ChatMessageDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

NetworkPartitionsData::ChatMessageDataReader_ptr NetworkPartitionsData::ChatMessageDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   NetworkPartitionsData::ChatMessageDataReader_ptr result;
   result = dynamic_cast < NetworkPartitionsData::ChatMessageDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * NetworkPartitionsData::ChatMessageDataReaderView::_local_id = "IDL:NetworkPartitionsData/ChatMessageDataReaderView:1.0";

NetworkPartitionsData::ChatMessageDataReaderView_ptr NetworkPartitionsData::ChatMessageDataReaderView::_duplicate (NetworkPartitionsData::ChatMessageDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean NetworkPartitionsData::ChatMessageDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, NetworkPartitionsData::ChatMessageDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

NetworkPartitionsData::ChatMessageDataReaderView_ptr NetworkPartitionsData::ChatMessageDataReaderView::_narrow (DDS::Object_ptr p)
{
   NetworkPartitionsData::ChatMessageDataReaderView_ptr result = NULL;
   if (p && p->_is_a (NetworkPartitionsData::ChatMessageDataReaderView::_local_id))
   {
      result = dynamic_cast < NetworkPartitionsData::ChatMessageDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

NetworkPartitionsData::ChatMessageDataReaderView_ptr NetworkPartitionsData::ChatMessageDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   NetworkPartitionsData::ChatMessageDataReaderView_ptr result;
   result = dynamic_cast < NetworkPartitionsData::ChatMessageDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}



